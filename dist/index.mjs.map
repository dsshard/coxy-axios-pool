{"version":3,"sources":["../src/index.ts"],"names":["createAxiosPool","initialOptions","configs","pool","AxiosPool","target","name","url","data","options","instances","config","axios","abort","promises","client","json","result","any","response","instance","error","resolve","RpcAxiosPool","nodes","method","params"],"mappings":"gDASO,SAASA,CAAAA,CACdC,KACGC,CACY,CAAA,CACf,IAAMC,CAAO,CAAA,IAAIC,EAAUH,CAAgB,CAAA,GAAGC,CAAO,CAC/CG,CAAAA,CAAAA,CAAS,CACb,GAAK,CAAA,CAACA,EAAQC,CAA0B,GAAA,MAAOC,EAAaC,CAAMC,CAAAA,CAAAA,GAAgC,CAChG,GAAIN,CAAAA,CAAKG,CAAI,CACX,CAAA,OAAOH,EAAKG,CAAI,CAAA,CAAEC,EAAKC,CAAMC,CAAAA,CAAO,CAExC,CACF,CAAA,CACA,OAAO,IAAI,KAAM,CAAA,GAAIJ,CAAM,CAC7B,CAEaD,IAAAA,CAAAA,CAAN,KAAgB,CAMrB,WAAA,CAAYK,KAA8BP,CAAwC,CAAA,CAJlF,KAAQ,YAAe,CAAA,CAAA,CAKrB,IAAMQ,CAAY,CAAA,GAClB,IAAWC,IAAAA,CAAAA,IAAUT,CACf,CAAA,OAAOS,CAAW,EAAA,QAAA,CACpBD,EAAU,IAAKE,CAAAA,CAAAA,CAAM,OAAO,CAAE,OAAA,CAASD,CAAO,CAAC,CAAC,EAEhDD,CAAU,CAAA,IAAA,CAAKC,CAAM,CAGzB,CAAA,IAAA,CAAK,QAAU,CACb,OAAA,CAASF,GAAS,OAAY,GAAA,MAAA,CAAY,IAAOA,CAAAA,CAAAA,CAAQ,OACzD,CAAA,OAAA,CAASA,GAAS,OAAY,GAAA,MAAA,CAAY,EAAIA,CAAS,EAAA,OAAA,CACvD,iBAAkBA,CAAS,EAAA,gBAAA,CAAmBA,GAAS,gBAAmB,CAAA,IAAM,QAAQ,OAAQ,EAClG,EACA,IAAK,CAAA,IAAA,CAAOC,EACd,CAEA,MAAa,GAAIH,CAAAA,CAAAA,CAAaE,CAAqD,CAAA,CACjF,OAAO,IAAK,CAAA,OAAA,CAAQ,CAClB,MAAQ,CAAA,KAAA,CACR,IAAAF,CACA,CAAA,GAAGE,CACL,CAAC,CACH,CAEA,MAAa,IAAA,CAAKF,EAAaC,CAAMC,CAAAA,CAAAA,CAAqD,CACxF,OAAO,IAAA,CAAK,OAAQ,CAAA,CAClB,MAAQ,CAAA,MAAA,CACR,KAAAD,CACA,CAAA,GAAA,CAAAD,EACA,GAAGE,CACL,CAAC,CACH,CAEA,MAAa,MAAOF,CAAAA,CAAAA,CAAaC,EAAMC,CAAqD,CAAA,CAC1F,OAAO,IAAK,CAAA,OAAA,CAAQ,CAClB,MAAQ,CAAA,QAAA,CACR,IAAAD,CAAAA,CAAAA,CACA,GAAAD,CAAAA,CAAAA,CACA,GAAGE,CACL,CAAC,CACH,CAEA,MAAa,IAAIF,CAAaC,CAAAA,CAAAA,CAAMC,EAAqD,CACvF,OAAO,KAAK,OAAQ,CAAA,CAClB,OAAQ,KACR,CAAA,IAAA,CAAAD,EACA,GAAAD,CAAAA,CAAAA,CACA,GAAGE,CACL,CAAC,CACH,CAEA,MAAc,OAAA,CAAQA,EAAqD,CACzE,GAAI,KAAK,OAAQ,CAAA,OAAA,CAAS,CACxB,IAAMI,CAAAA,CAAQ,IAAI,eACZC,CAAAA,CAAAA,CAAW,EACjB,CAAA,IAAA,IAAWC,KAAU,IAAK,CAAA,IAAA,CACxBD,CAAS,CAAA,IAAA,CACPC,CAAO,CAAA,OAAA,CAAQ,CACb,GAAGN,CAAAA,CACH,OAAQI,CAAM,CAAA,MAAA,CACd,kBAAmB,CAChBL,CAAAA,EAAS,CACR,IAAIQ,CAAAA,CACJ,GAAI,CACFA,CAAAA,CAAO,KAAK,KAAMR,CAAAA,CAAI,EACxB,CAAQ,KAAA,EAER,OAAIQ,CACF,EAAA,IAAA,CAAK,QAAQ,gBAAiBA,CAAAA,CAAI,EAC3BA,CAET,GAAA,IAAA,CAAK,QAAQ,gBAAiBR,CAAAA,CAAI,EAC3BA,CACT,CAAA,CACF,CACF,CAAC,CACH,EAGF,IAAMS,CAAAA,CAASC,EAAIJ,CAAQ,CAAA,CAC3B,OAAAG,CAAAA,CACG,IAAK,CAAA,MAAOE,IACXN,CAAM,CAAA,KAAA,GACCM,CACR,CAAA,CAAA,CACA,MAAM,IAAM,IAAI,EAEZF,CACT,CAEA,IAAMG,CAAW,CAAA,IAAA,CAAK,KAAK,IAAK,CAAA,YAAY,EAC5C,GAAI,CACF,IAAMH,CAAAA,CAAS,MAAMG,CAAAA,CAAS,QAAQX,CAAO,CAAA,CAC7C,YAAK,OAAQ,CAAA,gBAAA,CAAiBQ,EAAO,IAAI,CAAA,CACzC,KAAK,YAAe,CAAA,CAAA,CACbA,CACT,CAASI,MAAAA,CAAAA,CAAO,CACd,GAAI,IAAA,CAAK,KAAK,IAAK,CAAA,YAAA,CAAe,CAAC,CAAA,CACjC,OAAI,IAAA,CAAK,QAAQ,OAAU,CAAA,CAAA,EACzB,MAAM,IAAI,OAAA,CAASC,GAAY,UAAWA,CAAAA,CAAAA,CAAS,KAAK,OAAQ,CAAA,OAAO,CAAC,CAE1E,CAAA,IAAA,CAAK,cAAgB,CACd,CAAA,IAAA,CAAK,QAAQb,CAAO,CAAA,CAE7B,MAAK,IAAA,CAAA,YAAA,CAAe,CACdY,CAAAA,CACR,CACF,CACF,CAAA,CAEaE,EAAN,KAAmB,CAIxB,YAAYC,CAAsCf,CAAAA,CAAAA,CAA2B,CAF7E,IAAQ,CAAA,EAAA,CAAK,EAGX,IAAK,CAAA,IAAA,CAAOT,EAAgBS,CAAS,CAAA,GAAGe,CAAK,EAC/C,CAGA,MAAa,OAAA,CAAQC,CAAmBC,CAAAA,GAAAA,CAAAA,CAAqC,CAC3E,OAAK,IAAA,CAAA,EAAA,EAAM,EACJ,MAAM,IAAA,CAAK,KAAK,IAAK,CAAA,GAAA,CAAK,CAC/B,OAAS,CAAA,KAAA,CACT,GAAI,IAAK,CAAA,EAAA,CACT,OAAAD,CACA,CAAA,MAAA,CAAQC,GAAU,EACpB,CAAC,CACH,CACF","file":"index.mjs","sourcesContent":["import axios, { type AxiosInstance, type AxiosRequestConfig, type AxiosResponse } from 'axios'\nimport any from 'promise.any'\n\nexport interface AxiosPoolConfig {\n  sendAll?: boolean\n  timeout?: number\n  validateResponse?: (response: AxiosResponse['data']) => void\n}\n\nexport function createAxiosPool(\n  initialOptions?: AxiosPoolConfig,\n  ...configs: Array<AxiosInstance | string>\n): AxiosInstance {\n  const pool = new AxiosPool(initialOptions, ...configs)\n  const target = {\n    get: (target, name: keyof AxiosPool) => async (url: string, data, options: AxiosRequestConfig) => {\n      if (pool[name]) {\n        return pool[name](url, data, options)\n      }\n    },\n  }\n  return new Proxy({}, target)\n}\n\nexport class AxiosPool {\n  private readonly options: AxiosPoolConfig\n  private currentIndex = 0\n\n  private readonly pool: AxiosInstance[]\n\n  constructor(options?: AxiosPoolConfig, ...configs: Array<AxiosInstance | string>) {\n    const instances = []\n    for (const config of configs) {\n      if (typeof config === 'string') {\n        instances.push(axios.create({ baseURL: config }))\n      } else {\n        instances.push(config)\n      }\n    }\n    this.options = {\n      sendAll: options?.sendAll === undefined ? true : options.sendAll,\n      timeout: options?.timeout === undefined ? 0 : options?.timeout,\n      validateResponse: options?.validateResponse ? options?.validateResponse : () => Promise.resolve(),\n    }\n    this.pool = instances\n  }\n\n  public async get(url: string, options: AxiosRequestConfig): Promise<AxiosResponse> {\n    return this.request({\n      method: 'get',\n      url,\n      ...options,\n    })\n  }\n\n  public async post(url: string, data, options: AxiosRequestConfig): Promise<AxiosResponse> {\n    return this.request({\n      method: 'post',\n      data,\n      url,\n      ...options,\n    })\n  }\n\n  public async delete(url: string, data, options: AxiosRequestConfig): Promise<AxiosResponse> {\n    return this.request({\n      method: 'delete',\n      data,\n      url,\n      ...options,\n    })\n  }\n\n  public async put(url: string, data, options: AxiosRequestConfig): Promise<AxiosResponse> {\n    return this.request({\n      method: 'put',\n      data,\n      url,\n      ...options,\n    })\n  }\n\n  private async request(options: AxiosRequestConfig): Promise<AxiosResponse> {\n    if (this.options.sendAll) {\n      const abort = new AbortController()\n      const promises = []\n      for (const client of this.pool) {\n        promises.push(\n          client.request({\n            ...options,\n            signal: abort.signal,\n            transformResponse: [\n              (data) => {\n                let json: unknown\n                try {\n                  json = JSON.parse(data)\n                } catch {}\n\n                if (json) {\n                  this.options.validateResponse(json)\n                  return json\n                }\n                this.options.validateResponse(data)\n                return data\n              },\n            ],\n          }),\n        )\n      }\n\n      const result = any(promises)\n      result\n        .then(async (response: AxiosResponse) => {\n          abort.abort()\n          return response\n        })\n        .catch(() => null)\n\n      return result\n    }\n\n    const instance = this.pool[this.currentIndex]\n    try {\n      const result = await instance.request(options)\n      this.options.validateResponse(result.data)\n      this.currentIndex = 0\n      return result\n    } catch (error) {\n      if (this.pool[this.currentIndex + 1]) {\n        if (this.options.timeout > 0) {\n          await new Promise((resolve) => setTimeout(resolve, this.options.timeout))\n        }\n        this.currentIndex += 1\n        return this.request(options)\n      }\n      this.currentIndex = 0\n      throw error\n    }\n  }\n}\n\nexport class RpcAxiosPool {\n  private readonly pool: AxiosInstance\n  private id = 0\n\n  constructor(nodes: Array<AxiosInstance | string>, options?: AxiosPoolConfig) {\n    this.pool = createAxiosPool(options, ...nodes)\n  }\n\n  // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n  public async request(method: string, ...params: any): Promise<AxiosResponse> {\n    this.id += 1\n    return await this.pool.post('/', {\n      jsonrpc: '2.0',\n      id: this.id,\n      method,\n      params: params || [],\n    })\n  }\n}\n"]}